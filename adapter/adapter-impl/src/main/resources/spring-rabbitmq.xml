<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-2.0.xsd">
    <!--连接工厂-->
    <rabbit:connection-factory id="rabbit.connection.factory"
                               virtual-host="${rabbitmq.vhost}"
                               addresses="${rabbitmq.addresses}"
                               username="${rabbitmq.username}"
                               password="${rabbitmq.password}"
                               publisher-confirms="true"
                               publisher-returns="true"/>

    <!-- 定义admin,producer中的exchange,queue会自动的利用该admin自动在spring中生成 -->
    <rabbit:admin id="rabbit.admin" connection-factory="rabbit.connection.factory"/>

    <!--如果消息没有到exchange,则confirm回调,ack=false-->
    <!--如果消息到达exchange,则confirm回调,ack=true-->
    <bean id="rabiit.confirm.callback.listener" class="com.ycg.ksh.adapter.impl.rabbitmq.ConfirmCallBackListener"/>

    <!--exchange到queue成功,则不回调return-->
    <!--exchange到queue失败,则回调return(需设置mandatory=true,否则不回回调,消息就丢了)-->
    <bean id="rabiit.return.callback.listener" class="com.ycg.ksh.adapter.impl.rabbitmq.ReturnCallBackListener"/>
    <!--消息转换 -->
    <bean id="rabiit.message.converter.jackson2Json" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

    <!-- 定义rabbitmq模板,用于接收以及发送消息 -->
    <rabbit:template id="rabbit.template.common" connection-factory="rabbit.connection.factory"
                     message-converter="rabiit.message.converter.jackson2Json"
                     confirm-callback="rabiit.confirm.callback.listener"
                     return-callback="rabiit.return.callback.listener"
                     exchange="exchange.direct.rabbit.default"
                     mandatory="true"/>

    <!--创建队列-->
    <rabbit:queue name="kylin.qianlima.transport.queue"/>
    <rabbit:queue name="direct.internal.transport.queue"/>
    <rabbit:queue name="direct.internal.net.queue"/>
    <rabbit:queue name="direct.internal.core.queue"/>
    <rabbit:queue name="direct.internal.collect.queue"/>
    <rabbit:queue name="direct.internal.api.queue"/>
    <!--创建分发交换器-->
    <rabbit:direct-exchange name="exchange.direct.rabbit.default">
        <rabbit:bindings>
            <rabbit:binding queue="kylin.qianlima.transport.queue" key="route.out.kylin.key"/>
            <rabbit:binding queue="direct.internal.transport.queue" key="route.in.direct.key"/>
            <rabbit:binding queue="direct.internal.net.queue" key="route.in.direct.net"/>
            <rabbit:binding queue="direct.internal.core.queue" key="route.in.direct.core"/>
            <rabbit:binding queue="direct.internal.collect.queue" key="route.in.direct.collect"/>
            <rabbit:binding queue="direct.internal.api.queue" key="route.in.direct.api"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--接收信息-->
    <bean id="rabbit.transport.queue.listenter" class="com.ycg.ksh.common.extend.rabbitmq.RabbitAdaptableListener">
        <property name="messageConverter" ref="rabiit.message.converter.jackson2Json"/>
        <property name="listeners">
            <map>
                <entry key="__message_type_email__">
                    <bean class="com.ycg.ksh.adapter.impl.rabbitmq.EmailMessageListenter"/>
                </entry>
                <entry key="com.ycg.ksh.entity.adapter.wechat.TemplateMesssage">
                    <bean class="com.ycg.ksh.adapter.impl.WeChatApiServiceImpl"/>
                </entry>
                <entry key="com.ycg.ksh.entity.common.wechat.message.Message">
                    <bean class="com.ycg.ksh.adapter.impl.WeChatApiServiceImpl"/>
                </entry>
            </map>
        </property>
    </bean>

    <rabbit:listener-container connection-factory="rabbit.connection.factory" prefetch="1" acknowledge="auto">
        <rabbit:listener queues="direct.internal.net.queue" ref="rabbit.transport.queue.listenter"/>
    </rabbit:listener-container>
</beans>